/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistema.Cliente;

/**
 *
 * @author henri
 */
public class editarSegmento extends javax.swing.JFrame {

    /**
     * Creates new form editarSegmento
     */
    public Cliente cliente;
    private String authToken;
    public String ip;
    public int porta;
    public ObjectNode listarPontos;
    public String id;
       
    public editarSegmento(String token,String ip,int porta,String id) {
        initComponents();
        this.authToken = token;
        cliente = Cliente.getInstance(ip, porta);
        this.ip = ip;
        this.porta = porta;
        this.id=id;
       pontosListar(token);
       getDados();
        // Restante do código de inicialização da interface do usuário
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbClientes = new javax.swing.JTable();
        txtIdOrigem = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDirecao = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        txtDistancia = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservacao = new javax.swing.JTextArea();
        txtIdDestino = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 153, 255));
        jLabel3.setText("Segmentos");

        jLabel6.setText("ID do Ponto de Destino");

        jLabel4.setText("Direção");

        jLabel7.setText("ID do Ponto de Origem");

        tbClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Observações"
            }
        ));
        jScrollPane2.setViewportView(tbClientes);

        txtIdOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdOrigemActionPerformed(evt);
            }
        });

        jLabel2.setText("Lista de Pontos");

        txtDirecao.setToolTipText("");
        txtDirecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirecaoActionPerformed(evt);
            }
        });

        jLabel1.setText("Observacao");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        jLabel5.setText("Distância");

        btnVoltar.setText("voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        txtDistancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDistanciaActionPerformed(evt);
            }
        });

        txtObservacao.setColumns(20);
        txtObservacao.setRows(5);
        jScrollPane1.setViewportView(txtObservacao);

        txtIdDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdDestinoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(txtDirecao)
                                .addComponent(jScrollPane1)
                                .addComponent(jLabel4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(txtDistancia)
                                .addComponent(txtIdDestino, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtIdOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                                .addGap(14, 14, 14))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtIdOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIdDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDirecao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(7, 7, 7)
                        .addComponent(txtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltar)
                    .addComponent(btnCadastrar))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIdOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdOrigemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdOrigemActionPerformed

    private void txtDirecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirecaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDirecaoActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        ObjectNode retorno = editar();
        boolean isError = retorno.get("error").asBoolean();
        if(isError){
            mostrarAviso(retorno.get("message").asText());
        }else{
            indexAdmin admin = new indexAdmin(authToken,ip,porta);
            this.dispose();
            admin.setVisible(true);
            admin.mostrarAviso(retorno.get("message").asText());
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        indexAdmin admin = new indexAdmin(authToken,ip,porta);
        this.dispose();
        admin.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void txtDistanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDistanciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDistanciaActionPerformed

    private void txtIdDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdDestinoActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(editarSegmento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(editarSegmento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(editarSegmento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(editarSegmento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new editarSegmento().setVisible(true);
//            }
//        });
//    }
public ObjectNode editar() {
        ObjectNode respostaDoServidor;
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode jsonData = objectMapper.createObjectNode();
        ObjectNode jsonToSend = objectMapper.createObjectNode();
        ObjectNode pontoOrigem = objectMapper.createObjectNode();
        ObjectNode pontoDestino = objectMapper.createObjectNode();
        ObjectNode segmento = objectMapper.createObjectNode();

        try {
            JsonNode dataNode =  this.listarPontos.path("data");
            JsonNode pontos = dataNode.path("pontos");

            for (JsonNode ponto : pontos) {
                if(txtIdOrigem.getText().equals(ponto.get("id").asText())){
                    pontoOrigem.put("id", ponto.get("id").asText());
                    pontoOrigem.put("name", ponto.get("name").asText());
                    pontoOrigem.put("obs",ponto.get("obs").asText());
                }
                if(txtIdDestino.getText().equals(ponto.get("id").asText())){
                    pontoDestino.put("id", ponto.get("id").asText());
                    pontoDestino.put("name", ponto.get("name").asText());
                    pontoDestino.put("obs",ponto.get("obs").asText());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // Dados para o ponto de destino
//        pontoDestino.put("id", 2);
//        pontoDestino.put("name", "Porta Bloco C");
//        pontoDestino.put("obs", "Próximo à capela");

        // Dados para o segmento
        segmento.set("ponto_origem", pontoOrigem);
        segmento.set("ponto_destino", pontoDestino);
        segmento.put("direcao", txtDirecao.getText());
        segmento.put("distancia", txtDistancia.getText());
        segmento.put("obs",txtObservacao.getText());

        // Dados para o objeto principal
        jsonData.put("token", authToken);
        jsonData.put("segmento_id", id);

        jsonData.set("segmento", segmento);
        jsonToSend.put("action", "edicao-segmento");
        jsonToSend.set("data", jsonData);
        
        // Envie os dados para o servidor (substitua 'DadosParaServidor' pelos dados reais)
        respostaDoServidor = cliente.enviarSolicitacao(jsonToSend);
       
        // Feche os fluxos e a conexão com o servidor
        return respostaDoServidor;
    }
    
    public void getDados(){
        ObjectNode respostaDoServidor;
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode jsonData = objectMapper.createObjectNode();
        jsonData.put("token", authToken);
        jsonData.put("segmento_id", id);
        ObjectNode jsonToSend = objectMapper.createObjectNode();
        jsonToSend.put("action", "pedido-edicao-segmento");
        jsonToSend.set("data", jsonData);

        respostaDoServidor = cliente.enviarSolicitacao(jsonToSend);
        System.out.println(respostaDoServidor);

        boolean isError = respostaDoServidor.get("error").asBoolean();
        if(isError){
            mostrarAviso(respostaDoServidor.get("message").asText());
        }else{
                JsonNode dataNode = respostaDoServidor.get("data").path("segmento");
                txtDirecao.setText(dataNode.get("direcao").asText());
                txtDistancia.setText(dataNode.get("distancia").asText());
                txtObservacao.setText(dataNode.get("obs").asText());
                txtIdOrigem.setText(dataNode.get("ponto_origem").get("id").asText());
                txtIdDestino.setText(dataNode.get("ponto_destino").get("id").asText());

        }
    }

    public void pontosListar(String token) {
    ObjectNode respostaDoServidor;
    
    ObjectMapper objectMapper = new ObjectMapper();
    ObjectNode jsonData = objectMapper.createObjectNode();
    jsonData.put("token", token);
    ObjectNode jsonToSend = objectMapper.createObjectNode();
    jsonToSend.put("action", "listar-pontos");
    jsonToSend.set("data", jsonData);
    
    ObjectNode retorno =  respostaDoServidor = cliente.enviarSolicitacao(jsonToSend);
    System.out.println(respostaDoServidor);

    boolean isError = retorno.get("error").asBoolean();
    if(isError){
        mostrarAviso(retorno.get("message").asText());
    }else{
        this.listarPontos = retorno;
        DefaultTableModel modelo = (DefaultTableModel) tbClientes.getModel();

        try {
            JsonNode dataNode = respostaDoServidor.path("data");
            JsonNode users = dataNode.path("pontos");

            for (JsonNode user : users) {
                int id = user.get("id").asInt();
                String name = user.get("name").asText();
                String observacao = user.get("obs").asText();

                Object[] rowData = { id, name,observacao };
                modelo.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

         public void mostrarAviso(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbClientes;
    private javax.swing.JTextField txtDirecao;
    private javax.swing.JTextField txtDistancia;
    private javax.swing.JTextField txtIdDestino;
    private javax.swing.JTextField txtIdOrigem;
    private javax.swing.JTextArea txtObservacao;
    // End of variables declaration//GEN-END:variables
}
